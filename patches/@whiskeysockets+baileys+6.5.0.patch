diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js
index 1046c0d..d2a0c7d 100644
--- a/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/decode-wa-message.js
@@ -143,7 +143,10 @@ const decryptMessageNode = (stanza, meId, repository, logger) => {
                         }
                     }
                     catch (err) {
+                        // alterado aqui jaison
+                        if(fullMessage.key?.remoteJid !== 'status@broadcast') {
                         logger.error({ key: fullMessage.key, err }, 'failed to decrypt message');
+                        }
                         fullMessage.messageStubType = WAProto_1.proto.WebMessageInfo.StubType.CIPHERTEXT;
                         fullMessage.messageStubParameters = [err.message];
                     }
diff --git a/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js
index 726886e..980be1a 100644
--- a/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js
+++ b/node_modules/@whiskeysockets/baileys/lib/Utils/messages.js
@@ -724,6 +724,10 @@ const downloadMediaMessage = async (message, type, options, ctx) => {
             throw new boom_1.Boom(`"${contentType}" message is not a media message`);
         }
         let download;
+        // alterado aqui jaison
+        if (media.stickerSentTs) {
+            delete media.url;
+        }
         if ('thumbnailDirectPath' in media && !('url' in media)) {
             download = {
                 directPath: media.thumbnailDirectPath,
